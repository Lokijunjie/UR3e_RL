// Generated by gencpp from file cartesian_control_msgs/FollowCartesianTrajectoryAction.msg
// DO NOT EDIT!


#ifndef CARTESIAN_CONTROL_MSGS_MESSAGE_FOLLOWCARTESIANTRAJECTORYACTION_H
#define CARTESIAN_CONTROL_MSGS_MESSAGE_FOLLOWCARTESIANTRAJECTORYACTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cartesian_control_msgs/FollowCartesianTrajectoryActionGoal.h>
#include <cartesian_control_msgs/FollowCartesianTrajectoryActionResult.h>
#include <cartesian_control_msgs/FollowCartesianTrajectoryActionFeedback.h>

namespace cartesian_control_msgs
{
template <class ContainerAllocator>
struct FollowCartesianTrajectoryAction_
{
  typedef FollowCartesianTrajectoryAction_<ContainerAllocator> Type;

  FollowCartesianTrajectoryAction_()
    : action_goal()
    , action_result()
    , action_feedback()  {
    }
  FollowCartesianTrajectoryAction_(const ContainerAllocator& _alloc)
    : action_goal(_alloc)
    , action_result(_alloc)
    , action_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::cartesian_control_msgs::FollowCartesianTrajectoryActionGoal_<ContainerAllocator>  _action_goal_type;
  _action_goal_type action_goal;

   typedef  ::cartesian_control_msgs::FollowCartesianTrajectoryActionResult_<ContainerAllocator>  _action_result_type;
  _action_result_type action_result;

   typedef  ::cartesian_control_msgs::FollowCartesianTrajectoryActionFeedback_<ContainerAllocator>  _action_feedback_type;
  _action_feedback_type action_feedback;





  typedef boost::shared_ptr< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> const> ConstPtr;

}; // struct FollowCartesianTrajectoryAction_

typedef ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<std::allocator<void> > FollowCartesianTrajectoryAction;

typedef boost::shared_ptr< ::cartesian_control_msgs::FollowCartesianTrajectoryAction > FollowCartesianTrajectoryActionPtr;
typedef boost::shared_ptr< ::cartesian_control_msgs::FollowCartesianTrajectoryAction const> FollowCartesianTrajectoryActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator1> & lhs, const ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator2> & rhs)
{
  return lhs.action_goal == rhs.action_goal &&
    lhs.action_result == rhs.action_result &&
    lhs.action_feedback == rhs.action_feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator1> & lhs, const ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4581bf2d47714fa6117ec4dd002e7002";
  }

  static const char* value(const ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4581bf2d47714fa6ULL;
  static const uint64_t static_value2 = 0x117ec4dd002e7002ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_control_msgs/FollowCartesianTrajectoryAction";
  }

  static const char* value(const ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"FollowCartesianTrajectoryActionGoal action_goal\n"
"FollowCartesianTrajectoryActionResult action_result\n"
"FollowCartesianTrajectoryActionFeedback action_feedback\n"
"\n"
"================================================================================\n"
"MSG: cartesian_control_msgs/FollowCartesianTrajectoryActionGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalID goal_id\n"
"FollowCartesianTrajectoryGoal goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalID\n"
"# The stamp should store the time at which this goal was requested.\n"
"# It is used by an action server when it tries to preempt all\n"
"# goals that were requested before a certain time\n"
"time stamp\n"
"\n"
"# The id provides a way to associate feedback and\n"
"# result message with specific goal requests. The id\n"
"# specified must be unique.\n"
"string id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: cartesian_control_msgs/FollowCartesianTrajectoryGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"CartesianTrajectory trajectory\n"
"CartesianTolerance path_tolerance\n"
"CartesianTolerance goal_tolerance\n"
"duration goal_time_tolerance\n"
"\n"
"\n"
"================================================================================\n"
"MSG: cartesian_control_msgs/CartesianTrajectory\n"
"# header.frame_id is the frame in which all data from CartesianTrajectoryPoint[] is given\n"
"Header header\n"
"CartesianTrajectoryPoint[] points\n"
"string controlled_frame\n"
"\n"
"================================================================================\n"
"MSG: cartesian_control_msgs/CartesianTrajectoryPoint\n"
"duration time_from_start\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Twist twist\n"
"geometry_msgs/Accel acceleration\n"
"# A more suitable datatype would be good, see https://github.com/ros/common_msgs/issues/137\n"
"geometry_msgs/Accel jerk\n"
"CartesianPosture posture\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: cartesian_control_msgs/CartesianPosture\n"
"# Posture joint names may reflect a subset of all available joints (empty posture definitions are\n"
"# also possible). The length of posture_joint_names and posture_joint_values have to be equal.\n"
"\n"
"string[] posture_joint_names\n"
"float64[] posture_joint_values\n"
"\n"
"================================================================================\n"
"MSG: cartesian_control_msgs/CartesianTolerance\n"
"geometry_msgs/Vector3 position_error\n"
"geometry_msgs/Vector3 orientation_error\n"
"geometry_msgs/Twist twist_error\n"
"geometry_msgs/Accel acceleration_error\n"
"\n"
"================================================================================\n"
"MSG: cartesian_control_msgs/FollowCartesianTrajectoryActionResult\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalStatus status\n"
"FollowCartesianTrajectoryResult result\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalStatus\n"
"GoalID goal_id\n"
"uint8 status\n"
"uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n"
"uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n"
"uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n"
"                            #   and has since completed its execution (Terminal State)\n"
"uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n"
"uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n"
"                            #    to some failure (Terminal State)\n"
"uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n"
"                            #    because the goal was unattainable or invalid (Terminal State)\n"
"uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n"
"                            #    and has not yet completed execution\n"
"uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n"
"                            #    but the action server has not yet confirmed that the goal is canceled\n"
"uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n"
"                            #    and was successfully cancelled (Terminal State)\n"
"uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n"
"                            #    sent over the wire by an action server\n"
"\n"
"#Allow for the user to associate a string with GoalStatus for debugging\n"
"string text\n"
"\n"
"\n"
"================================================================================\n"
"MSG: cartesian_control_msgs/FollowCartesianTrajectoryResult\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"int32 error_code\n"
"int32 SUCCESSFUL = 0\n"
"int32 INVALID_GOAL = -1 # e.g. illegal quaternions in poses\n"
"int32 INVALID_JOINTS = -2\n"
"int32 OLD_HEADER_TIMESTAMP = -3\n"
"int32 PATH_TOLERANCE_VIOLATED = -4\n"
"int32 GOAL_TOLERANCE_VIOLATED = -5\n"
"int32 INVALID_POSTURE = -6\n"
"\n"
"string error_string\n"
"\n"
"\n"
"================================================================================\n"
"MSG: cartesian_control_msgs/FollowCartesianTrajectoryActionFeedback\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalStatus status\n"
"FollowCartesianTrajectoryFeedback feedback\n"
"\n"
"================================================================================\n"
"MSG: cartesian_control_msgs/FollowCartesianTrajectoryFeedback\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"string controlled_frame\n"
"CartesianTrajectoryPoint desired\n"
"CartesianTrajectoryPoint actual\n"
"CartesianTrajectoryPoint error\n"
"\n"
;
  }

  static const char* value(const ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_goal);
      stream.next(m.action_result);
      stream.next(m.action_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FollowCartesianTrajectoryAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_control_msgs::FollowCartesianTrajectoryAction_<ContainerAllocator>& v)
  {
    s << indent << "action_goal: ";
    s << std::endl;
    Printer< ::cartesian_control_msgs::FollowCartesianTrajectoryActionGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.action_goal);
    s << indent << "action_result: ";
    s << std::endl;
    Printer< ::cartesian_control_msgs::FollowCartesianTrajectoryActionResult_<ContainerAllocator> >::stream(s, indent + "  ", v.action_result);
    s << indent << "action_feedback: ";
    s << std::endl;
    Printer< ::cartesian_control_msgs::FollowCartesianTrajectoryActionFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.action_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_CONTROL_MSGS_MESSAGE_FOLLOWCARTESIANTRAJECTORYACTION_H
