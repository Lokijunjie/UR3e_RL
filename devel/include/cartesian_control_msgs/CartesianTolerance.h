// Generated by gencpp from file cartesian_control_msgs/CartesianTolerance.msg
// DO NOT EDIT!


#ifndef CARTESIAN_CONTROL_MSGS_MESSAGE_CARTESIANTOLERANCE_H
#define CARTESIAN_CONTROL_MSGS_MESSAGE_CARTESIANTOLERANCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>

namespace cartesian_control_msgs
{
template <class ContainerAllocator>
struct CartesianTolerance_
{
  typedef CartesianTolerance_<ContainerAllocator> Type;

  CartesianTolerance_()
    : position_error()
    , orientation_error()
    , twist_error()
    , acceleration_error()  {
    }
  CartesianTolerance_(const ContainerAllocator& _alloc)
    : position_error(_alloc)
    , orientation_error(_alloc)
    , twist_error(_alloc)
    , acceleration_error(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_error_type;
  _position_error_type position_error;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _orientation_error_type;
  _orientation_error_type orientation_error;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_error_type;
  _twist_error_type twist_error;

   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _acceleration_error_type;
  _acceleration_error_type acceleration_error;





  typedef boost::shared_ptr< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianTolerance_

typedef ::cartesian_control_msgs::CartesianTolerance_<std::allocator<void> > CartesianTolerance;

typedef boost::shared_ptr< ::cartesian_control_msgs::CartesianTolerance > CartesianTolerancePtr;
typedef boost::shared_ptr< ::cartesian_control_msgs::CartesianTolerance const> CartesianToleranceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator1> & lhs, const ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator2> & rhs)
{
  return lhs.position_error == rhs.position_error &&
    lhs.orientation_error == rhs.orientation_error &&
    lhs.twist_error == rhs.twist_error &&
    lhs.acceleration_error == rhs.acceleration_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator1> & lhs, const ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af7b81a920293904e6a5480495adb8d1";
  }

  static const char* value(const ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf7b81a920293904ULL;
  static const uint64_t static_value2 = 0xe6a5480495adb8d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_control_msgs/CartesianTolerance";
  }

  static const char* value(const ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 position_error\n"
"geometry_msgs/Vector3 orientation_error\n"
"geometry_msgs/Twist twist_error\n"
"geometry_msgs/Accel acceleration_error\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_error);
      stream.next(m.orientation_error);
      stream.next(m.twist_error);
      stream.next(m.acceleration_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianTolerance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_control_msgs::CartesianTolerance_<ContainerAllocator>& v)
  {
    s << indent << "position_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position_error);
    s << indent << "orientation_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation_error);
    s << indent << "twist_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist_error);
    s << indent << "acceleration_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_CONTROL_MSGS_MESSAGE_CARTESIANTOLERANCE_H
