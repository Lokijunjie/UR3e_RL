// Generated by gencpp from file cartesian_control_msgs/CartesianPosture.msg
// DO NOT EDIT!


#ifndef CARTESIAN_CONTROL_MSGS_MESSAGE_CARTESIANPOSTURE_H
#define CARTESIAN_CONTROL_MSGS_MESSAGE_CARTESIANPOSTURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cartesian_control_msgs
{
template <class ContainerAllocator>
struct CartesianPosture_
{
  typedef CartesianPosture_<ContainerAllocator> Type;

  CartesianPosture_()
    : posture_joint_names()
    , posture_joint_values()  {
    }
  CartesianPosture_(const ContainerAllocator& _alloc)
    : posture_joint_names(_alloc)
    , posture_joint_values(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _posture_joint_names_type;
  _posture_joint_names_type posture_joint_names;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _posture_joint_values_type;
  _posture_joint_values_type posture_joint_values;





  typedef boost::shared_ptr< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianPosture_

typedef ::cartesian_control_msgs::CartesianPosture_<std::allocator<void> > CartesianPosture;

typedef boost::shared_ptr< ::cartesian_control_msgs::CartesianPosture > CartesianPosturePtr;
typedef boost::shared_ptr< ::cartesian_control_msgs::CartesianPosture const> CartesianPostureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator1> & lhs, const ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator2> & rhs)
{
  return lhs.posture_joint_names == rhs.posture_joint_names &&
    lhs.posture_joint_values == rhs.posture_joint_values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator1> & lhs, const ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd61b7ee575c3e6d2dc191be6b741ff0";
  }

  static const char* value(const ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd61b7ee575c3e6dULL;
  static const uint64_t static_value2 = 0x2dc191be6b741ff0ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_control_msgs/CartesianPosture";
  }

  static const char* value(const ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Posture joint names may reflect a subset of all available joints (empty posture definitions are\n"
"# also possible). The length of posture_joint_names and posture_joint_values have to be equal.\n"
"\n"
"string[] posture_joint_names\n"
"float64[] posture_joint_values\n"
;
  }

  static const char* value(const ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posture_joint_names);
      stream.next(m.posture_joint_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianPosture_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_control_msgs::CartesianPosture_<ContainerAllocator>& v)
  {
    s << indent << "posture_joint_names[]" << std::endl;
    for (size_t i = 0; i < v.posture_joint_names.size(); ++i)
    {
      s << indent << "  posture_joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.posture_joint_names[i]);
    }
    s << indent << "posture_joint_values[]" << std::endl;
    for (size_t i = 0; i < v.posture_joint_values.size(); ++i)
    {
      s << indent << "  posture_joint_values[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.posture_joint_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_CONTROL_MSGS_MESSAGE_CARTESIANPOSTURE_H
