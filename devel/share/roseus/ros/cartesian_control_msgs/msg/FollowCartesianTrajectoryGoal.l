;; Auto-generated. Do not edit!


(when (boundp 'cartesian_control_msgs::FollowCartesianTrajectoryGoal)
  (if (not (find-package "CARTESIAN_CONTROL_MSGS"))
    (make-package "CARTESIAN_CONTROL_MSGS"))
  (shadow 'FollowCartesianTrajectoryGoal (find-package "CARTESIAN_CONTROL_MSGS")))
(unless (find-package "CARTESIAN_CONTROL_MSGS::FOLLOWCARTESIANTRAJECTORYGOAL")
  (make-package "CARTESIAN_CONTROL_MSGS::FOLLOWCARTESIANTRAJECTORYGOAL"))

(in-package "ROS")
;;//! \htmlinclude FollowCartesianTrajectoryGoal.msg.html


(defclass cartesian_control_msgs::FollowCartesianTrajectoryGoal
  :super ros::object
  :slots (_trajectory _path_tolerance _goal_tolerance _goal_time_tolerance ))

(defmethod cartesian_control_msgs::FollowCartesianTrajectoryGoal
  (:init
   (&key
    ((:trajectory __trajectory) (instance cartesian_control_msgs::CartesianTrajectory :init))
    ((:path_tolerance __path_tolerance) (instance cartesian_control_msgs::CartesianTolerance :init))
    ((:goal_tolerance __goal_tolerance) (instance cartesian_control_msgs::CartesianTolerance :init))
    ((:goal_time_tolerance __goal_time_tolerance) (instance ros::time :init))
    )
   (send-super :init)
   (setq _trajectory __trajectory)
   (setq _path_tolerance __path_tolerance)
   (setq _goal_tolerance __goal_tolerance)
   (setq _goal_time_tolerance __goal_time_tolerance)
   self)
  (:trajectory
   (&rest __trajectory)
   (if (keywordp (car __trajectory))
       (send* _trajectory __trajectory)
     (progn
       (if __trajectory (setq _trajectory (car __trajectory)))
       _trajectory)))
  (:path_tolerance
   (&rest __path_tolerance)
   (if (keywordp (car __path_tolerance))
       (send* _path_tolerance __path_tolerance)
     (progn
       (if __path_tolerance (setq _path_tolerance (car __path_tolerance)))
       _path_tolerance)))
  (:goal_tolerance
   (&rest __goal_tolerance)
   (if (keywordp (car __goal_tolerance))
       (send* _goal_tolerance __goal_tolerance)
     (progn
       (if __goal_tolerance (setq _goal_tolerance (car __goal_tolerance)))
       _goal_tolerance)))
  (:goal_time_tolerance
   (&optional __goal_time_tolerance)
   (if __goal_time_tolerance (setq _goal_time_tolerance __goal_time_tolerance)) _goal_time_tolerance)
  (:serialization-length
   ()
   (+
    ;; cartesian_control_msgs/CartesianTrajectory _trajectory
    (send _trajectory :serialization-length)
    ;; cartesian_control_msgs/CartesianTolerance _path_tolerance
    (send _path_tolerance :serialization-length)
    ;; cartesian_control_msgs/CartesianTolerance _goal_tolerance
    (send _goal_tolerance :serialization-length)
    ;; duration _goal_time_tolerance
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; cartesian_control_msgs/CartesianTrajectory _trajectory
       (send _trajectory :serialize s)
     ;; cartesian_control_msgs/CartesianTolerance _path_tolerance
       (send _path_tolerance :serialize s)
     ;; cartesian_control_msgs/CartesianTolerance _goal_tolerance
       (send _goal_tolerance :serialize s)
     ;; duration _goal_time_tolerance
       (write-long (send _goal_time_tolerance :sec) s) (write-long (send _goal_time_tolerance :nsec) s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; cartesian_control_msgs/CartesianTrajectory _trajectory
     (send _trajectory :deserialize buf ptr-) (incf ptr- (send _trajectory :serialization-length))
   ;; cartesian_control_msgs/CartesianTolerance _path_tolerance
     (send _path_tolerance :deserialize buf ptr-) (incf ptr- (send _path_tolerance :serialization-length))
   ;; cartesian_control_msgs/CartesianTolerance _goal_tolerance
     (send _goal_tolerance :deserialize buf ptr-) (incf ptr- (send _goal_tolerance :serialization-length))
   ;; duration _goal_time_tolerance
     (send _goal_time_tolerance :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _goal_time_tolerance :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get cartesian_control_msgs::FollowCartesianTrajectoryGoal :md5sum-) "53c6564a309cf1d1f2d2c4e0478a40b3")
(setf (get cartesian_control_msgs::FollowCartesianTrajectoryGoal :datatype-) "cartesian_control_msgs/FollowCartesianTrajectoryGoal")
(setf (get cartesian_control_msgs::FollowCartesianTrajectoryGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
CartesianTrajectory trajectory
CartesianTolerance path_tolerance
CartesianTolerance goal_tolerance
duration goal_time_tolerance


================================================================================
MSG: cartesian_control_msgs/CartesianTrajectory
# header.frame_id is the frame in which all data from CartesianTrajectoryPoint[] is given
Header header
CartesianTrajectoryPoint[] points
string controlled_frame

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: cartesian_control_msgs/CartesianTrajectoryPoint
duration time_from_start
geometry_msgs/Pose pose
geometry_msgs/Twist twist
geometry_msgs/Accel acceleration
# A more suitable datatype would be good, see https://github.com/ros/common_msgs/issues/137
geometry_msgs/Accel jerk
CartesianPosture posture

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: cartesian_control_msgs/CartesianPosture
# Posture joint names may reflect a subset of all available joints (empty posture definitions are
# also possible). The length of posture_joint_names and posture_joint_values have to be equal.

string[] posture_joint_names
float64[] posture_joint_values

================================================================================
MSG: cartesian_control_msgs/CartesianTolerance
geometry_msgs/Vector3 position_error
geometry_msgs/Vector3 orientation_error
geometry_msgs/Twist twist_error
geometry_msgs/Accel acceleration_error

")



(provide :cartesian_control_msgs/FollowCartesianTrajectoryGoal "53c6564a309cf1d1f2d2c4e0478a40b3")


